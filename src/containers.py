"""–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""

import os
from asyncio import to_thread
from functools import partial

import wikipedia
from PIL.Image import Image
from aiogram import Bot, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from deep_translator import MyMemoryTranslator
from diffusers import DiffusionPipeline
from dotenv import load_dotenv
from gtts import gTTS


class Conf:
    """–ö–æ–Ω—Ñ–∏–≥–∏"""
    load_dotenv()

    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    DIFFUSION_STEP = int(os.getenv('DIFFUSION_STEP'))
    EMAIL = os.getenv('EMAIL')
    REPO = os.getenv('REPO')
    IS_MAC_MPS = bool(int(os.getenv('IS_MAC_MPS')))
    IMAGE_SIZE = (int(os.getenv('IMAGE_SIZE')), int(os.getenv('IMAGE_SIZE')))
    DIFFUSION_PIPELINE_CONF = {
        'pretrained_model_name_or_path': 'runwayml/stable-diffusion-v1-5',
        'safety_checker': None,
        'requires_safety_checker': False
    }
    TEXT_TO_IMAGE_KB_NAME = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ üåá'
    MY_LAST_PHOTO_KB_NAME = '–ú–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–µ–ª—Ñ–∏'
    SCHOOL_PHOTO_KB_NAME = '–ú–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã'
    MY_STORIES = (
        'GPT - —ç—Ç–æ –ø—Ä–æ—Ä—ã–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–º–æ—â—å—é ChatGPT'
        ' –º–æ–∂–Ω–æ —É—Å–∫–æ—Ä—è—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ "—É–º–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫"',
        '–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É SQL –∏ NoSQL. SQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä—è–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –°–£–ë–î.'
        ' –í—Å–µ–≥–¥–∞ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞. –Ø—Ä–∫–∏–π –ø—Ä–∏–º–µ—Ä - postgres.'
        ' NoSQL - —ç—Ç–æ –ª—é–±–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–æ–π —è–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–æ–≤. –Ø—Ä–∫–∏–π –ø—Ä–∏–º–µ—Ä Redis',
        '–í –ø–µ—Ä–≤–æ–º –∫–ª–∞—Å—Å–µ –±—ã–ª. –û–¥–Ω—É –¥–µ–≤–æ—á–∫—É –ª—é–±–∏–ª!'
        ' –Ø –µ–π —Å—Ç–∏—Ö–∏ –ø–∏—Å–∞–ª –∏ —Ü–≤–µ—Ç—ã –¥–∞—Ä–∏–ª, –ê –æ–Ω–∞ –º–µ–Ω—è –≤ –ª–æ–± –±–∏–ª–∞.'
    )
    wikipedia.set_lang("ru")


class Storage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ"""
    users_image_wait_list = set()
    memory_storage = MemoryStorage()


class Setup:
    """–°–µ—Ç–∞–ø –±–æ—Ç–∞"""
    bot = Bot(token=Conf.TELEGRAM_BOT_TOKEN)
    dp = Dispatcher(bot, storage=Storage.memory_storage)
    text_to_image = KeyboardButton(Conf.TEXT_TO_IMAGE_KB_NAME)
    generate_my_last_photo = KeyboardButton(Conf.MY_LAST_PHOTO_KB_NAME)
    generate_school_photo = KeyboardButton(Conf.SCHOOL_PHOTO_KB_NAME)
    text_to_image_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    text_to_image_keyboard.add(text_to_image, generate_my_last_photo, generate_school_photo)


class StableDiffusion:
    """StableDiffusion –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    __text_to_image = None
    __mps = False

    @classmethod
    async def text_to_image(cls, text: str) -> Image:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        image = await cls.__text_to_image(text)
        return image.resize(Conf.IMAGE_SIZE)

    @classmethod
    async def __text_to_image_mps(cls, text: str) -> Image:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è gpu –∏–ª–∏ cpu"""
        if cls.__mps:
            return await cls.__text_to_image_cpu(text)
        cls.__mps = True
        pipe = cls.mps_pipe
        try:
            result = await to_thread(
                lambda prompt=text: pipe(prompt, num_inference_steps=Conf.DIFFUSION_STEP).images[0]
            )
        finally:
            cls.__mps = False
        return result

    @classmethod
    async def __text_to_image_cpu(cls, text: str) -> Image:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è cpu"""
        pipe = await to_thread(
            lambda: DiffusionPipeline.from_pretrained(**Conf.DIFFUSION_PIPELINE_CONF).to('cpu')
        )
        pipe.enable_attention_slicing()
        return await to_thread(
            lambda prompt=text: pipe(prompt, num_inference_steps=Conf.DIFFUSION_STEP).images[0]
        )

    if Conf.IS_MAC_MPS:
        mps_pipe = DiffusionPipeline.from_pretrained(**Conf.DIFFUSION_PIPELINE_CONF).to('mps')
        mps_pipe.enable_attention_slicing()
        __text_to_image = __text_to_image_mps
    else:
        __text_to_image = __text_to_image_cpu


class LangTranslator:
    """–†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º"""
    translator = MyMemoryTranslator(source='russian', target='english us')
    text_to_audio = partial(gTTS, lang='ru', slow=False)
